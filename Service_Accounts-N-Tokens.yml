kubectl create sa my-sa
kubectl create token my-sa

kubectl create role my-sa-role --verb=get,list,watch --resource=pods
kubectl create rolebinding my-sa-rolebinding --clusterrole=my-sa-role --serviceaccount=default:my-sa
# Please note to access the pods across all namespaces you must create clusterole instead of role
---
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: null
  name: my-sa

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  name: my-sa-role
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  name: my-sa-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-sa-role
subjects:
- kind: ServiceAccount
  name: my-sa
  namespace: default

---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
  name: nginx
spec:
  serviceAccountName: my-sa
  #automountServiceAccountToken: false
  containers:
  - image: nginx
    name: nginx
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}




TOKEN=`cat /var/run/secrets/kubernetes.io/serviceaccount/token`
curl -sSk -H "Authorization: Bearer $TOKEN" https://172.30.1.2:6443/api/v1